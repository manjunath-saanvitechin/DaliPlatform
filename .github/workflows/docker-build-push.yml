name: Build, Push, and Deploy Docker Image

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx (optional but recommended for Docker Compose)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 4: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      # Step 5: Build the Docker image using docker-compose
      - name: Build Docker image
        run: |
          docker-compose -f docker-compose.yml build authenticationservice

      # Step 6: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker-compose -f docker-compose.yml push authenticationservice

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # Waits for the 'build-and-push' job to finish

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Deploy to Server
      - name: Deploy to Server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_IP << EOF
            # Stop and remove all containers except the Jenkins container
            docker ps -q | grep -v \$(docker ps -q --filter "name=jenkins") | xargs -r docker stop
            docker ps -a -q | grep -v \$(docker ps -q --filter "name=jenkins") | xargs -r docker rm
            # Clean up old images
            docker image prune -af
            cd /root/Daliplatform
            # Pull the latest image
            docker pull manju88foru/authenticationservice:latest
            # Verify images and bring up the container with docker-compose
            docker images
            docker-compose up -d
          EOF
